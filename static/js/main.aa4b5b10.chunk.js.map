{"version":3,"sources":["components/Graph/Graph.tsx","components/Menu/Menu.tsx","Sorts/Helpers/Swap.ts","Sorts/Algorithms/BubbleSort.ts","Sorts/main.ts","Sorts/Algorithms/InsertionSort.ts","Sorts/Algorithms/MergeSort.ts","App.tsx","index.tsx"],"names":["Bar","height","_style","Color","background","width","border","style","Graph","bars","className","map","item","index","key","Menu","Sorts","Actions","handler","Time","x","type","name","onChange","y","onClick","action","swap","arr","i","j","sort","size","length","moves","push","current","sort_names","console","log","MergeSort","middle","Math","floor","leftSide","slice","rightSide","left","right","result","shift","merge","App","useState","Numbers","setNumbers","setTime","Option","setOption","generate","number","random","useEffect","startTime","Date","now","_loop","setInterval","toFixed","clearInterval","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa4b5b10.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport './graph.scss';\n\ninterface IGraphProps {\n    bars?: Array<number>\n}\n\ninterface iBarProps{\n    height: number,\n    Color?: string\n}\n\nconst Bar:React.FC<iBarProps> = function({height, Color}){\n\n    const _style = {\n        height: `${height}px`,\n        background: `rgba(${height % 3}, ${height / 1.2 }, ${height/2})`, \n        width: '50px',\n        border: '1px solid gray',\n    }\n\n    return(\n        <div style={_style}/>\n    )\n}\n\nconst Graph: React.FC<IGraphProps> = function({ bars }){\n\n    return (\n        <div className=\"Graph\">\n            {bars?.map((item, index) => {\n                return <Bar height={item} key={`bar${index*3}`} />\n            })}\n        </div>\n    )\n}\n\n\nexport default Graph;\n","import React, { Dispatch, SetStateAction } from 'react'\nimport './menu.scss';\n\ninterface IProps {\n    Sorts?: Array<string>,\n    Actions: Array<{name: string, action: () => void}>,\n    Time: string,\n    handler: Dispatch<SetStateAction<number>>\n}\n\nconst Menu: React.FC<IProps> = function({ Sorts, Actions, handler, Time }){\n    return (\n        <div className=\"Menu\">\n            <div className=\"Time\">Elapsed Time: {Time || '0.000'}</div>\n            <fieldset className=\"Sorts\">\n                 <legend>Sorts:</legend>\n                {Sorts?.map((x, index) => {\n                    return <label>\n                        {x}\n                        <input type=\"radio\" name=\"sorts\" onChange={() => handler(index)}></input>\n                    </label>\n                })}\n            </fieldset>\n            <div className=\"Actions\">\n                {Actions.map(y => {\n                    return <button onClick={() => y.action()}>{y.name}</button>\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default Menu;\n","export function swap(arr: Array<Number>, i: number, j: number){\n    let x = arr[i];\n    arr[i] = arr[j];\n    arr[j] = x;\n    return arr;\n};","import { swap } from '../Helpers/Swap';\n\nexport const BubbleSort = function(arr: Array<Number>){\n\n    const size = arr.length;\n    const moves = [];\n\n\n    for(let i = 0; i < size; i++){\n      for(let j = 0; j < size-i+1; j++){\n        if(arr[j] > arr[j+1]){\n          moves.push([j , j+1]);\n          arr = swap(arr, j, j+1);\n        }\n      }\n    }\n\n    return moves\n\n}\n\n","import { BubbleSort } from './Algorithms/BubbleSort';\nimport { InsertionSort } from './Algorithms/InsertionSort';\nimport { MergeSort } from './Algorithms/MergeSort';\n\nexport default [\n    {\n        name : 'BubbleSort',\n        sort : BubbleSort\n    },\n    {\n        name : 'InsertionSort',\n        sort : InsertionSort\n    }\n]\n\nexport const sort_names = [\n    'BubbleSort', 'InsertionSort'\n]\n\nconsole.log(MergeSort([1,5,3,2]));\n\n","import { swap } from '../Helpers/Swap';\n\nexport const InsertionSort = function(arr: Array<Number>){\n\n    const size = arr.length;\n    const moves = [];\n\n    for(let i = 1; i < size; i++){\n\n        let current = arr[i];\n        let j = i - 1;\n\n        while(j >= 0 && arr[j] > current){\n\n            moves.push([j, j+1]);\n            arr = swap(arr, j, j+1)\n            j--;\n        }\n\n        arr[j + 1] = current;\n    }\n    \n\n    return moves\n\n}\n\n","import { swap } from '../Helpers/Swap';\n\nconst merge = function(left:Array<number>, right:Array<number>){\n    const result = [];\n\n    // console.log(left, right);\n    while(left.length && right.length){\n\n        if(left[0] <= right[0]){\n         result.push(left.shift());\n        }else{\n          result.push(right.shift());\n        }\n    }\n\n    while(left.length) result.push(left.shift());\n          \n    while(right.length) result.push(right.shift());\n\n    console.log(result);\n    return result;\n\n}\n\nexport const MergeSort:any = function(arr: Array<Number>){\n\n    const size = arr.length;\n    const moves = [];\n\n    if(arr.length < 2) return arr;\n\n    const middle = Math.floor(size/2);\n\n    const leftSide = arr.slice(0, middle);\n    const rightSide = arr.slice(middle, size);\n\n    return merge(MergeSort(leftSide), MergeSort(rightSide));\n\n}\n\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from './components/Graph/Graph';\nimport Menu from './components/Menu/Menu';\nimport Sorts, { sort_names }  from './Sorts/main';\nimport { swap }  from './Sorts/Helpers/Swap';\n\nfunction App() {\n\n  let sorting = false;\n  const [Numbers, setNumbers] = useState<Array<number>>([]);\n  const [Sort, setSort] = useState<Function>(() => {});\n  const [Time, setTime] = useState('')\n  const [Option, setOption] = useState(0)\n\n  const generate = function() {\n    if (sorting) return;\n    let arr = [];\n\n    for (let i = 50; i > 0; i--) {\n      let number = Math.floor(Math.random() * (400 - 5) + 5);\n      arr.push(number);\n    }\n    setNumbers(arr);\n  }\n\n  const start = function(){\n\n    let moves = Sorts[Option].sort([...Numbers]);\n    console.log(moves);\n    let i = 0;\n    let startTime = Date.now();\n\n        let _loop = setInterval(() => {\n        \n          if (moves[i]) {\n            swap(Numbers, moves[i][0], moves[i][1]);\n            setNumbers([...Numbers]);\n            setTime(((Date.now() - startTime) / 1000).toFixed(3));\n            i++;\n          } else {\n            clearInterval(_loop);\n          }\n        }, 5);\n\n  }\n\n\n  useEffect(() => {\n    generate();\n  }, [])\n  \n\n  return (\n    <div className=\"App\">\n      <Graph bars={Numbers}/>\n      <Menu Actions={[{name: 'Start', action: start}, {name: 'Re-Sort', action: generate}]} Sorts={sort_names} handler={setOption} Time={Time}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}